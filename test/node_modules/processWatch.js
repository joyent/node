// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var assert = require('assert');
var execute = require('child_process').exec;

//function to test if a pid is alive
exports.alive = function (pid, callback) {
    
  //call callback but only once
  var hasResponded = false;
  var respond = function (value) {
    if (hasResponded === false) {
      hasResponded = true;
      callback(value);
    }
  };
  
  //If darwin: use "ps | grep node"
  if (process.platform === 'darwin') {
    execute('ps | grep node', {timeout: 1000}, function (error, stdout, stderr) {
      
      //Check errors
      assert.ifError(error);
      assert.ifError(stderr);
      
      //Parse data and search for pid
      var data = stdout.split("\n");
      var i = data.length;
      while(i--) {
        var parse = data[i].split(/\s/).filter(function (value) {
          return value !== '';
        });
        if (parseInt(parse[0], 10) === pid) {
          respond(true);
        }
      }

      //respond with false otherwice
      respond(false);
    });
  }
  
  //OS not supported
  else {
    respond(false);
  }
};
  
//Watch a process given by a pid, and call callback when it dies
exports.watch = function (pid, callback, tries) {
    
  //default tries to 0
  tries = tries || 0;
  
  //See if process is alive
  exports.alive(pid, function (exist) {
  
    //call callback if it don't exist
    if (exist === false) {
      callback();
    }
    //wait 200 secound and try again, but stop after 20 tries
    else {
      assert.notEqual(tries, 20, "timeout, too many tries");
      setTimeout(function () {
        exports.watch(pid, callback, tries + 1);
      }, 100);
    }
  });
};
  
//Not all OS are supported yet, so we better test this
exports.alive(process.pid, function (exist) {
  assert.equal(exist, true, "the processWatch module is do not work");
});